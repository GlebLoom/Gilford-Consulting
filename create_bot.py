### —Ç–µ—Ö–Ω–∏–∫–∞
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from decouple import AutoConfig
import json
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


def load_users():
    try:
        with open('users.json', 'r') as f:
            return set(json.load(f))
    except (FileNotFoundError, json.JSONDecodeError):
        return set()

def save_users(users):
    with open('users.json', 'w') as f:
        json.dump(list(users), f)
        
# –ß–∏—Ç–∞–µ–º .env
config = AutoConfig(search_path='.')
API_TOKEN = config('TOKEN')
print(f"DEBUG: ADMINS raw: {config('ADMINS')}")
ADMINS = [int(x.strip()) for x in config('ADMINS').split(',')]

bot = Bot(token=API_TOKEN)
dp = Dispatcher()


# –ü—Ä–æ–≤–µ—Ä–∫–∞: —ç—Ç–æ –∞–¥–º–∏–Ω?
def is_admin(user_id):
    print(f"DEBUG: user_id={user_id}, ADMINS={ADMINS}")
    return user_id in ADMINS
###









@dp.message(Command(commands=['reply']))
async def admin_reply(message: types.Message):
    
    if message.from_user.id not in ADMINS:
        return
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        await message.answer('‚ùå –§–æ—Ä–º–∞—Ç: /reply user_id —Ç–µ–∫—Å—Ç')
        return 
    user_id = int(parts[1])
    text = parts[2]
    try:
        print(f"DEBUG chat.id={message.chat.id}, from_user.id={message.from_user.id}")
        await bot.send_message(user_id, text)
        await message.answer('‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.')
    except Exception as e:
        await message.answer(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}')







###
@dp.message()
async def catch_all_messages(message: types.Message):
    user_id = message.from_user.id
    user_text = message.text.strip()
    if user_id not in ADMINS:
        response_map = {
            '/command1': '–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ –≤ —Å—É–¥–µ',
            '/command2': '–í–∑—ã—Å–∫–∞–Ω–∏–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏',
            '/command3': '–ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü',
            '/command4': '–ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü',
            '/command5': '–ó–∞—â–∏—Ç–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏—Ö –¥–æ–ª–∂–Ω–∏–∫–∞ –ª–∏—Ü',
        }
        if message.text.strip() == '/start':
            if user_id not in USERS:
                USERS.add(user_id)
                save_users(USERS)
                for admin_id in ADMINS:
                    await bot.send_message(admin_id, f'üöÄ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! User_id = {user_id}')
        elif user_text in response_map:
            description = response_map[user_text]
            await message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {description}, –º—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.')
            for admin_id in ADMINS:
                await bot.send_message(admin_id, f'üë§ {user_id} : {description}')
        else:
            for admin_id in ADMINS:
                await bot.send_message(admin_id, f'üë§ {user_id} : {user_text}')
###








         

###

async def main():
    global USERS
    USERS = load_users()
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)
    


while True:
    asyncio.run(main())
###